---
layout: post
title:  "[Part 2] Rails with PayPal subscriptions guide"
date:   2015-03-19 16:00
categories: rails
---

In the [first post of this series](/rails/2014/11/01/part-1-rails-with-paypal-subscription-guide.html) we have took brief look on the mediation objects and the PayPal subscription flow. Now we'll understand how setup our app on the PayPal Sandbox network and take a look on the controller layer.

## PayPal Sandbox Network

Fortunately, PayPal provides a sandbox network where we can create "fake accounts" and use it like real PayPal accounts (on the sandobox network). This will be extremely useful for testing the whole app.

## Setting up

First of all you need a regular PayPal account, so, if you don't have one [create right now](https://www.paypal.com/br/signup/account).

After this, access the [PayPal Developer Area](https://developer.paypal.com), there you have all tools to test your app's PayPal things.

On the developer area you need create a new sandbox user account, this account must be **BUSINESS** type. The data for this account can be anything, you don't even need a real email. This account will provides the credentials for our app.

<div class="image-container">
  <a href="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-1.png" target="_blank">
    <img src="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-1.png" class="image-with-shadow full-image" />
  </a>
</div>

After create your fake account get the credentials as shown below.

<div class="image-container">
  <a href="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-2.png" target="_blank">
    <img src="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-2.png" class="image-with-shadow full-image" />
  </a>
</div>

PayPal needs an endpoint on your app to notifies about the changes on your customer's subscriptions, so we need register this URL endpoint on our PayPal fake account.

You need access your fake account on the **[sandbox network](https://www.sandbox.paypal.com)** and register the endpoint, don't worry, we'll create this endpoint on our app soon, this endpoint will follow this structure: `http://<app-host>/paypal/ipn_listener.html`. Follow the steps below.

<div class="image-container">
  <a href="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-3.png" target="_blank">
    <img src="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-3.png" class="image-with-shadow full-image" />
  </a>
</div>

<div class="image-container">
  <a href="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-4.png" target="_blank">
    <img src="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-4.png" class="image-with-shadow full-image" />
  </a>
</div>

<div class="image-container">
  <a href="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-5.png" target="_blank">
    <img src="https://s3-us-west-2.amazonaws.com/samuel-blog/tutorial-paypal-5.png" class="image-with-shadow half-image" />
  </a>
</div>

This endpoint need be public accessible from the internet, so you only can test the notification reception with your app online or using some kind of [SSH tunnel](https://gist.github.com/fnando/1101211).

You need configure the recurring gem with the PayPal credentials, I highly recomend you to store the PayPal credentials on our app with ENV vars as shown in [.env.sample](https://github.com/samuelsimoes/rails-paypal-subscriptions-sample/blob/master/.env.sample) and [config/initializers/paypal_recurring.rb](https://github.com/samuelsimoes/rails-paypal-subscriptions-sample/blob/master/config/initializers/paypal_recurring.rb).

## The controller layer

Our app's controller layer will make the whole mediation within our service objects explained on the first part of this series. It's very complicated explain every implementation detail, so, I recommend you to read the controller and service objects carefully some times to get familiar with that and if you have any question you can comment below.

### Plans controller
This controller basicaly renders the page with the available subscription plans on our app with a link to subscribe.

**[app/controllers/plans_controller.rb](https://github.com/samuelsimoes/rails-paypal-subscriptions-sample/blob/master/app/controllers/plans_controller.rb)**
{% highlight ruby %}
class PlansController < ApplicationController
  def index
    @plans = Plan.all
  end
end
{% endhighlight %}

### Subscriptions controller
This is the most important controller of our app. On index action, we show all created subscriptions and there we create the subscriptions. On create action we create a subscription record on regular Rails way and after this we redirect the user to `checkout_url`, this url is generated by the method on line 34~41, notice that we pass to the `PaypalSubscription::ResourceFacade#checkout_url` two URLs, the `return_url` and `cancel_url`, this two URL is used by PayPal's payment page to redirect our costumer back to our app.

**[app/controllers/subscriptions_controller.rb](https://github.com/samuelsimoes/rails-paypal-subscriptions-sample/blob/master/app/controllers/subscriptions_controller.rb)**
{% highlight ruby linenos %}
class SubscriptionsController < ApplicationController
  def index
    @subscriptions = Subscription.all
  end

  def show
  end

  def create
    @subscription = Subscription.create(subscription_params)
    redirect_to checkout_url
  end

  def make_recurring
    if PaypalSubscription::RecurrenceCreator.create!(
        subscription: subscription,
        paypal_options: paypal_options.merge({
          payer_id: params[:PayerID],
          token: params[:token]
        })
      )
      redirect_to subscription_path(subscription),
        notice: I18n.t('flashes.subscription.successfully_created')
    end
  end

  def destroy
    @subscription.destroy
    redirect_to subscriptions_url, notice: 'Subscription was successfully destroyed.'
  end

  private

  def checkout_url
    PaypalSubscription::ResourceFacade.checkout_url(
      paypal_options.merge({
        return_url: make_recurring_subscription_url(subscription),
        cancel_url: subscription_url(subscription, aborting_operation: true)
      })
    )
  end

  def paypal_options
    @paypal_options ||=
      PaypalSubscription::DefaultOptions.for(subscription)
  end

  def subscription
    @subscription ||= Subscription.find(params[:id])
  end
  helper_method :subscription

  def subscription_params
    params.permit(:plan_id)
  end
end
{% endhighlight %}

We set on the PayPal redirect URL to redirect our customer back to our app on the page `/subscriptions/<id>/make_recurring`.

This after payment redirect will come with important subscription informations on query string, we'll use the `PayerID`, which we'll store on the `paypal_payer_id` column of our customer's subscription record and `token`, which will be used on the internals of the paypal-recurring gem. The action responsible to this is the `make_recurring` (lines 14~25).

Take a look on the explanation of the `PaypalSubscription::RecurrenceCreator`, this is the service object that create the recurrence profile. If this object can do it, the customer is redirected to the subscription's page with the flash message explaining that your subscription is created and we are expecting the PayPal confirms the successful payment (remember the endpoint `http://<app-host>/paypal/ipn_listener.html`, we gonna receive the notification there).

### PayPal controller

This is the last one. This controller have only one action, the `ipn_listener`, this action is public exposed to receive PayPal payloads with informations about the subscriptions statuses created on our app. This endpoint doesn't need render anything, only respond a HTTP 200 code, if the server returns whichever error code on this request, PayPal will try send the notification again later.

**[app/controllers/paypal_controller.rb](https://github.com/samuelsimoes/rails-paypal-subscriptions-sample/blob/master/app/controllers/paypal_controller.rb)**
{% highlight ruby linenos %}
class PaypalController < ApplicationController
  protect_from_forgery except: [:ipn_listener]

  def ipn_listener
    if params[:txn_type].present?
      PaypalSubscription::NotificationHandler.resolve!(
        subscription: subscription,
        notification: notification
      )
    end

    render nothing: true
  end

  private

  def subscription
    @subscription ||=
      Subscription.find_by!(
        id: notification.reference,
        paypal_payer_id: notification.payer_id
      )
  end

  def notification
    @notification ||= PayPal::Recurring::Notification.new(params)
  end
end
{% endhighlight %}

On this action we verify if the param `txn_type` is present on the notification payload, the request that import to this endpoint must contains this param, otherwhise we can ignore.

On the `#notification` method we instantiate the recurring gem `PayPal::Recurring::Notification` object with the request payload, this notification object is a wrapper to received payload.

On the `#subscription` method (line 17~23) we search to the subscription record what the payload is referencing using the `reference` and `payer_id` attributes from the `PayPal::Recurring::Notification` instance.

Finally we pass to the `PaypalSubscription::NotificationHandler` the subscription model and the notification. This service object updates the subscription record according to the notification type (canceling, updating the "paid until" and so on).

_P.S.: We need skip the Rails forgery protection (line 2) on this action once this request doesn't returns the Rails verifier token._

### Profit!
Phew, PayPal subscriptions is a large topic and I hope that this guide have helped you, is very complicated explain every detail of the implementation, but again, you can read and test the full app on the **[Github repository](https://github.com/samuelsimoes/rails-paypal-subscriptions-sample/)**, I truly recommend you to read the commit messages, where I explain every creation step.

Cya!
